"""
Django settings for src project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
import ast
import dj_database_url
from socket import gethostbyname, gethostname
from datetime import datetime, timedelta

def get_bool_from_env(name, default_value):
    if name in os.environ:
        value = os.environ[name]
        try:
            return ast.literal_eval(value)
        except ValueError as e:
            raise ValueError(
                '{} is an invalid value for {}'.format(value, name)) from e
    return default_value

def get_list(text):
    return [item.strip() for item in text.split(',')]

def get_number_from_env(name, default_value):
    if name in os.environ:
        value = os.environ[name]
        try:
            return ast.literal_eval(value)
        except ValueError as e:
            raise ValueError(
                '{} is an invalid value for {}'.format(value, name)) from e
    return default_value

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%6w5@5u7)ey5@+%)4yg=j=5j71+*gnc=or411^pqz_lwou=bq&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = get_list(os.environ.get(
    'ALLOWED_HOSTS', 'localhost,127.0.0.1')) + [gethostname(), gethostbyname(gethostname()), ]

ALLOWED_GRAPHQL_ORIGINS = os.environ.get(
    'ALLOWED_GRAPHQL_ORIGINS', 'localhost,' + gethostname() + ',' + gethostbyname(gethostname()))

AUTH_USER_MODEL = 'account.User'

# Application definition

INSTALLED_APPS = [
    # External apps
    'graphene_django',
    'storages',
    # Django modules
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.humanize',
    'django.contrib.messages',
    'django.contrib.postgres',  # for postgres fulltext search
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'constance',
    'constance.backends.database',
    'notifications',  # django-notifications-hq
    # Local apps
    'src',
    'src.account',
    'src.booking',    
    'src.core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'src.urls'
loaders = [
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
]
PROJECT_ROOT = os.path.normpath(os.path.join(os.path.dirname(__file__), ".."))

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(PROJECT_ROOT, 'templates')],
        'OPTIONS': {
            'debug': DEBUG,
            'loaders': loaders,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'src.wsgi.application'
# Change this value if your application is running behind a proxy,
# e.g. HTTP_CF_Connecting_IP for Cloudflare or X_FORWARDED_FOR
REAL_IP_ENVIRON = os.environ.get('REAL_IP_ENVIRON', 'REMOTE_ADDR')

# The maximum length of a graphql query to log in tracings
OPENTRACING_MAX_QUERY_LENGTH_LOG = 2000
GRAPHENE = {
    'RELAY_CONNECTION_ENFORCE_FIRST_OR_LAST': True,
    'RELAY_CONNECTION_MAX_LIMIT': 100,
    'MIDDLEWARE': [
        'src.graphql.middleware.JWTMiddleware',
        # 'src.graphql.middleware.EncodeResponseValuesMiddleware',
    ],
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
DEFAULT_DATABASE_URL = 'postgres://admin:admin@db/admin'
DATABASE_URL = os.environ.get('DATABASE_URL', DEFAULT_DATABASE_URL)

DATABASE_CONNECTION_DEFAULT_NAME = "default"
DATABASE_CONNECTION_REPLICA_NAME = "default"
DATABASES = {
    'default': dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=None  # Set to None for persistent connections
    )
}

PLAYGROUND_ENABLED = get_bool_from_env(
    'PLAYGROUND_ENABLED', True) if DEBUG else False

# Logging
API_MIN_TIME_TO_LOG = get_number_from_env(
    "API_MIN_TIME_TO_LOG", 1000)  # unit 'ms'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

USING_MINIO = get_bool_from_env("USING_MINIO", False)
# Minio S3 configuration
MINIO_S3_ENDPOINT_URL = os.environ.get("MINIO_S3_ENDPOINT_URL")
MINIO_ACCESS_KEY_ID = os.environ.get("MINIO_ACCESS_KEY_ID")
MINIO_SECRET_ACCESS_KEY = os.environ.get("MINIO_SECRET_ACCESS_KEY")
MINIO_STORAGE_BUCKET_NAME = os.environ.get("MINIO_STORAGE_BUCKET_NAME")

CONSTANCE_DATABASE_CACHE_BACKEND = 'default'
CONSTANCE_REDIS_CONNECTION = {
    'host': 'localhost',
    'port': 6379,
    'db': 0,
}

CONSTANCE_ADDITIONAL_FIELDS = {
    'yes_no_null_select': ['django.forms.fields.ChoiceField', {
        'widget': 'django.forms.Select',
        'choices': ((None, "-----"), ("yes", "Yes"), ("no", "No"))
    }],
    'image_field': ['django.forms.ImageField', {}]
}

CONSTANCE_CONFIG = {
    'PRICE_CHARGE_PER_KM': (10000, 'Price charge customer per 1 km in VND'),
    'JWT_EXPIRATION_DELTA': (90, 'JWT expiration delta'),
    'MAX_CANCEL_COUNT': (3, 'Max cancel count to cancel the booking'),
    'ACCEPTABLE_DISTANCE_FINISH': (100, 'Max acceptable distance when driver click finish the booking'),
}

JWT_EXPIRATION_DELTA = timedelta(days=90)
#### SOLANA
SOLANA_ADDRESS_WALLET = ""
SOLANA_WS_CLUSTER = os.environ.get("SOLANA_WS_CLUSTER")
SOLANA_CLUSTER = os.environ.get("SOLANA_CLUSTER")
SOLANA_API = os.environ.get("SOLANA_API")
